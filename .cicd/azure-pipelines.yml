# trigger:
#   branches:
#     include:
#       - main  
#       - release/*
#   paths:
#     include:
#       - 'fabric_items/**'  

# pool:
#   vmImage: 'ubuntu-latest'  

# parameters:
#   - name: environment
#     displayName: Deployment Environment
#     type: string
#     default: 'dev'
#     values:
#       - 'dev'
#       - 'test'
#       - 'prod'

# variables:
#   - name: targetEnvironment
#     value: ${{ parameters.environment }}

# stages:
# - stage: DeployFabricItems
#   displayName: 'Deploy Fabric Items'
#   jobs:
#   - job: AuthenticateAndDeploy
#     displayName: 'Authenticate and Deploy'
#     steps:
#     - checkout: self  
#       fetchDepth: 1   

#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: '3.11' 
#         addToPath: true
#       displayName: 'Set up Python'

#     # - task: AzureKeyVault@2
#     #   condition: or(eq(variables['targetEnvironment'], 'dev'), eq(variables['targetEnvironment'], 'test'))
#     #   inputs:
#     #     azureSubscription: 'fabric-sc'  
#     #     KeyVaultName: '$(KeyVaultNameNonProd)'  
#     #     SecretsFilter: 'tenant-id-secret, fabric-non-prod-spn-secret, fabric-non-prod-spn-client-secret'
#     #   displayName: 'Get Key Vault Secrets (dev/test)'

#     # - task: AzureKeyVault@2
#     #   condition: eq(variables['targetEnvironment'], 'prod')
#     #   inputs:
#     #     azureSubscription: 'fabric-sc-prod'  
#     #     KeyVaultName: '$(KeyVaultNameProd)'  
#     #     SecretsFilter: 'tenantID, fabric-prod-secret, fabric-prod-spn-client-secret'
#     #   displayName: 'Get Key Vault Secrets (prod)'

#     - script: |
#         python -m pip install --upgrade pip
#         pip install -r .cicd/requirements.txt
#       displayName: 'Install dependencies'

#     - script: |
#         echo "Target Environment: $(targetEnvironment)"
#         echo "Working Directory: $(Build.SourcesDirectory)"
#         ls -a
#         python ./.cicd/authenticate_spn.py $(targetEnvironment)
#       condition: or(eq(variables['targetEnvironment'], 'dev'), eq(variables['targetEnvironment'], 'test'))
#       workingDirectory: $(Build.SourcesDirectory)/
#       env:
#         AZURE_CLIENT_ID: $(fabric-non-prod-spn-client-secret)
#         AZURE_TENANT_ID: $(tenant-id-secret)
#         AZURE_CLIENT_SECRET: $(fabric-non-prod-spn-secret)
#       displayName: 'Run authentication and deployment script (dev/test)'

#     # - script: |
#     #     echo "Target Environment: $(targetEnvironment)"
#     #     echo "Working Directory: $(Build.SourcesDirectory)"
#     #     ls -a
#     #     python ./.cicd/authenticate_spn.py $(targetEnvironment)
#     #   condition: eq(variables['targetEnvironment'], 'PROD')
#     #   workingDirectory: $(Build.SourcesDirectory)/
#     #   env:
#     #     AZURE_CLIENT_ID: $(fabric-prod-spn-client-secret)
#     #     AZURE_TENANT_ID: $(tenantID)
#     #     AZURE_CLIENT_SECRET: $(fabric-prod-secret)
#     #   displayName: 'Run authentication and deployment script (PROD)'
    
#     - task: PublishBuildArtifacts@1
#       inputs:
#         PathtoPublish: '$(Build.SourcesDirectory)/fabric_cicd.error.log'
#         ArtifactName: 'errorlog'
#         publishLocation: 'Container'
#       condition: always()
#       displayName: 'Publish error log artifact'




trigger:
  branches:
    include:
      - main
      - release/*
  paths:
    include:
      - 'fabric_items/**'  

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: environment
    displayName: Deployment Environment
    type: string
    default: 'dev'
    values:
      - 'dev'
      - 'test'
      - 'prod'

variables:
  - name: targetEnvironment
    value: ${{ parameters.environment }}

stages:
- stage: DeployFabricItems
  displayName: 'Deploy Fabric Items'
  jobs:
  - job: AuthenticateAndDeploy
    displayName: 'Authenticate and Deploy'
    steps:
    - checkout: self
      fetchDepth: 1

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.11'
        addToPath: true
      displayName: 'Set up Python'

    - task: PowerShell@2
      displayName: "Login with personal account"
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Logging into Azure using device code..."
          az login --use-device-code
          az account show

    - script: |
        python -m pip install --upgrade pip
        pip install -r .cicd/requirements.txt
      displayName: 'Install dependencies'

    - script: |
        echo "Target Environment: $(targetEnvironment)"
        python ./.cicd/authenticate_spn.py $(targetEnvironment)
      workingDirectory: $(Build.SourcesDirectory)/
      displayName: 'Run authentication and deployment script'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/fabric_cicd.error.log'
        ArtifactName: 'errorlog'
        publishLocation: 'Container'
      condition: always()
      displayName: 'Publish error log artifact'



